#!/usr/bin/env ruby
require 'bfire'
require 'optparse'
require 'logger'
require 'pp'

logger = Logger.new(STDERR)
logger.level = Logger.const_get(ENV['DEBUG'] || "WARN")

@options = {
  :logger => logger,
  :restfully_config => File.expand_path(
    "~/.restfully/api.bonfire-project.eu"
  )
}
  
filename = ARGV[0]
if filename.nil?
  dir = File.dirname(Dir.pwd)
  dsl = ""
  while line = gets do
    dsl << line
  end
else
  dir = File.dirname(filename)
  dsl = File.read(filename)
end

engine = Bfire::Engine.new(:root => dir)
engine.instance_eval(dsl)

option_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
* Description
  bfire: Launch experiments on BonFIRE.

* Usage
  $ bfire engine-file

* Options
BANNER
  
  opts.on("-a=", "--authorized-keys=", "Specify an authorized_keys file to use instead of your public key [default=#{engine.conf[:authorized_keys]}].") do |v|
    authorized_keys = File.expand_path(v)
    if File.file?(authorized_keys) && File.readable?(authorized_keys)
      @options[:authorized_keys] = authorized_keys
    else
      fail "Cannot find your authorized_keys file at #{authorized_keys.inspect}"
    end
  end
  opts.on("-c=", "--config=", "Pass the Restfully YAML configuration file. See <https://github.com/crohr/restfully>.") do |v|
    @options[:restfully_config] = File.expand_path(v)
  end
  opts.on("-u=", "--user=", "Specify your BonFIRE username [default=#{engine.conf[:user]}].") do |v|
    @options[:user] = v
  end
  opts.on("-g=", "--gateway=", "Issues SSH commands via the specified gateway [default=#{engine.conf[:gateway]}].") do |v|
    @options[:gateway] = v
  end
  opts.on("-w=", "--walltime=", "Specify the walltime for the experiment (in seconds) [default=#{engine.conf[:walltime]}].") do |v|
    @options[:walltime] = v.to_i
  end
  opts.on("-k=", "--key=", "Specify the private key to use [default=#{engine.conf[:key]}].") do |v|
    public_key = File.expand_path(v+".pub")
    if File.file?(public_key) && File.readable?(public_key)
      @options[:key] = v
      # public_key can already be set by --authorized-keys-file, 
      # don't override:
      @options[:authorized_keys] ||= public_key 
    else
      fail "Cannot find the public part of your SSH key at #{public_key.inspect}"
    end
  end
  {
    :no_cleanup => "Do not delete experiment at the end.",
    :no_cancel => "Do not delete experiment at the end, even if an error occurs.",
  }.each do |flag, description|
    opts.on("--#{flag.to_s.gsub('_','-')}", description) do |v|
      @options[flag] = true
    end
  end
  opts.on("--dev", "Attempts to reuse an existing experiment with the same name, in the running state.") do |v|
    @options[:dev] = true
  end
  opts.on("--name=", "Name for your experiment [default=#{engine.conf[:name]}].") do |v|
    @options[:name] = v
  end
  # opts.on("--log=", "Outputs log messages to the given file. Defaults to STDERR.") do |v|
  #   original_logger_level = logger.level
  #   logger = Logger.new(File.expand_path(v))
  #   logger.level = original_logger_level
  #   @options[:logger] = logger
  # end
  opts.on("--debug", "Set the logging level (DEBUG,INFO,WARN,ERROR,UNKNOWN) [default=#{engine.conf[:logging]}].") do |v|
    @options[:logging] = Logger.const_get(v.to_s.upcase)
  end
  opts.on("--version", "Display the version.") do |v|
    puts Bfire::VERSION
    exit(0)
  end
  opts.on_tail("-h", "--help", "Show this message.") do
    puts opts
    exit(0)
  end

end


begin
  option_parser.parse!
  @options.each do |k,v|
    engine.set(k, v)
  end

  engine.run!
rescue OptionParser::ParseError => e
  STDERR.puts "Error when parsing the options: #{e.message} (#{e.class.name})"
  exit(1)
end

